package com.flysolo.etrike.screens.main.bottom_nav.ride

import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.navigation.NavHostController
import com.flysolo.etrike.screens.shared.BackButton
import com.flysolo.etrike.utils.shortToast
import com.google.android.gms.maps.CameraUpdateFactory
import com.google.android.gms.maps.model.CameraPosition
import com.google.android.gms.maps.model.LatLng
import com.google.android.gms.maps.model.LatLngBounds
import com.google.maps.android.compose.GoogleMap
import com.google.maps.android.compose.MapProperties
import com.google.maps.android.compose.MapUiSettings
import com.google.maps.android.compose.Marker
import com.google.maps.android.compose.Polyline
import com.google.maps.android.compose.rememberCameraPositionState
import com.google.maps.android.compose.rememberMarkerState


@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun RideScreen(modifier: Modifier = Modifier, navHostController: NavHostController) {

    val rosarioBounds = LatLngBounds(
        LatLng(16.2108, 120.4683),
        LatLng(16.2508, 120.4983)
    )

    val municipal = LatLng(16.2298, 120.48689) // Municipal location

    // Camera position state
    val cameraPositionState = rememberCameraPositionState {
        position = CameraPosition.fromLatLngZoom(rosarioBounds.center, 20f)
    }

    // Marker state for municipal location
    val currentLocationState = rememberMarkerState(position = municipal)

    // State to store the other marker position
    val context = LocalContext.current
    var other by remember { mutableStateOf<LatLng?>(null) }

    // Marker state for the second location
    val placeLocationState = rememberMarkerState(position = other ?: municipal)

    // Update placeLocationState when 'other' changes
    LaunchedEffect(other) {
        placeLocationState.position = other ?: municipal
    }

    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text("Ride") },
                navigationIcon = { BackButton { navHostController.popBackStack() } }
            )
        }
    ) {
        GoogleMap(
            modifier = Modifier
                .fillMaxSize()
                .padding(it),
            cameraPositionState = cameraPositionState,
            properties = MapProperties(
                latLngBoundsForCameraTarget = rosarioBounds
            ),
            uiSettings = MapUiSettings(
                zoomControlsEnabled = false,
                scrollGesturesEnabled = true,
                zoomGesturesEnabled = true,
                scrollGesturesEnabledDuringRotateOrZoom = false
            ),
            onMapLoaded = {
                cameraPositionState.move(CameraUpdateFactory.newLatLngBounds(rosarioBounds, 0))
            },
            onMapClick = {
                context.shortToast("${it.latitude} : ${it.longitude}")
                other = it
            }
        ) {

            Marker(
                state = currentLocationState,
                title = "Municipal Location",
                snippet = "This is the municipal marker."
            )

            Marker(
                state = placeLocationState,
                title = "Go to place",
                snippet = "This is the place marker."
            )

            if (other != null) {
                Polyline(
                    points = listOf(municipal, other!!),
                    color = Color.Blue,
                    width = 5f
                )
            }
        }
    }
}

